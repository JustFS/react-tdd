Trouver la définition des roles
https://www.w3.org/TR/wai-aria/#role_definitions

https://github.com/testing-library/jest-dom 
https://testing-library.com/docs/react-testing-library/cheatsheet/

Différents events => user-events (permet tout type d'événement)
https://github.com/testing-library/user-event
npm install @testing-library/user-event @testing-library/dom

** Config **
npm i eslint-plugin-testing-library eslint-plugin-jest-dom
supprimer esling-config de package.json
créer fichier .eslintrc.json
    "eslint.options": {
        "configFile": ".eslintrc.json"
    },
    "eslint.validate": ["javascript", "javascriptreact"],
    "editor.codeActionsOnSave": {
        "source.fixAll.eslint": true
    }
      "eslint.alwaysShowStatus": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.formatOnSave": true
.gitignore => .eslintcache

React Testing Library => provides virtual DOM for tests

Jest => test runner

Un test vide passe
il est mieux d'avoir 1 "expect" par test

**** TDD ****
1 - écrire le test avant le code
2 - écrire un texte qui fail
3 - écrire un code qui est bon
*************

1 - npx create-react-app (installer version antérieure de babel maybe)
2 - npm test


*** SCREENS METHODS ***
get : expect element to be in DOM
query : expect element not to be in DOM
find : expect element to appear async

test("renders learn react link", () => {
  // Render crée un virtual DOM
  render(<App />);
  // Screen permet d'accéder au virtual DOM
  const linkElement = screen.getByText(/lean react/i);

  // Get by role pointe la balise
  // const linkElement = screen.getByRole("link", { name: /learn react/i });

  expect(linkElement).toBeInTheDocument();
});